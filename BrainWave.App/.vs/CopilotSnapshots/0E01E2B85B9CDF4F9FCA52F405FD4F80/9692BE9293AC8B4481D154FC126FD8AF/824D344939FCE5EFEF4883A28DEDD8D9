using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Input;
using BrainWave.App.Models;
using BrainWave.App.Services;
using System.Collections.ObjectModel;
using System.Threading.Tasks;

namespace BrainWave.App.ViewModels
{
    public partial class TaskDetailViewModel : ObservableObject
    {
        private readonly ApiService _api;
        private readonly AuthService _auth;

        [ObservableProperty]
        private TaskDto task;

        [ObservableProperty]
        private bool isBusy;

        [ObservableProperty]
        private string errorMessage;

        public TaskDetailViewModel(ApiService api, AuthService auth)
        {
            _api = api;
            _auth = auth;
        }

        public async Task LoadTaskAsync(int taskId)
        {
            IsBusy = true;
            ErrorMessage = string.Empty;
            try
            {
                var tasks = await _api.GetTasksAsync(_auth.CurrentUserId ?? 0);
                Task = tasks?.FirstOrDefault(t => t.TaskID == taskId);
            }
            catch (Exception ex)
            {
                ErrorMessage = ex.Message;
            }
            finally
            {
                IsBusy = false;
            }
        }
    }
}